/* ¬© 2017
 * @author Eric
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Container } from 'flux/utils';
import { withTracker } from 'meteor/react-meteor-data';
import { Link } from 'react-router-dom';
import ReactGA from 'react-ga';

import blockWords from './helpers/block-words.json';
import { errorSignInDashboard } from './events/AppActions';
import { Rooms, Users } from './collections';
import AccountsUIWrapper from './components/AccountUIWrapper';
import AppStore from './events/AppStore';
import UserStore from './events/UserStore';
import Toaster from './components/Toaster';

class Dashboard extends Component {
	static propTypes = {
		isSignedIn: PropTypes.bool,
		history: PropTypes.shape({
			push: PropTypes.func,
		}),
		rooms: PropTypes.arrayOf(PropTypes.object),
	};

	static defaultProps = {
		isSignedIn: false,
		history: null,
		rooms: [],
	};

	static getStores() {
		return [AppStore, UserStore];
	}

	static calculateState(/*prevState*/) {
		return {
			errorSignIn: UserStore.getState()['errorSignInDashboard'],
		};
	}

	state = {
		toasterOpen: false,
		toasterText: 'Toaster',
	};

	onInputName = e => {
		const input = e.target;
		const blockCharacter = /[!@#$%^&*()+=_{}[\]|\\/:;"'><?~`,.]/g;
		let usingBlockWordFlag = false;

		if (blockCharacter.test(input.value)) {
			input.setCustomValidity("Use only alphanumeric characters, space or '-'");

			return;
		}

		blockWords.forEach(word => {
			if (input.value.indexOf(word) > -1) {
				usingBlockWordFlag = true;
			}
		});

		if (usingBlockWordFlag) {
			input.setCustomValidity('You are using block words. Please try a different name');
		} else {
			input.setCustomValidity('');
		}
	};

	onCreateRoom = e => {
		e.preventDefault();
		if (!this.props.isSignedIn) {
			errorSignInDashboard();

			return;
		}

		const form = e.currentTarget;
		if (form.name && form.name.value) {
			Meteor.call('createRoom', form.name.value, Meteor.userId(), (err, id) => {
				if (err) {
					this.setState({
						toasterText: err.toString(),
						toasterOpen: true,
					});
				} else {
					ReactGA.event({
						category: 'Host',
						action: 'Created a Room',
					});
					this.props.history.push(`/room/${Rooms.findOne(id).slug}`);
				}
			});
		}
	};

	onToasterClose = () => {
		this.setState({
			toasterOpen: false,
		});
	};

	render() {
		const { rooms, isSignedIn } = this.props;
		const { errorSignIn, toasterOpen, toasterText } = this.state;

		return (
			<div className="dashboard">
				<img src="/nau-jukebox.svg" alt="nau jukebox logo" className="dashboard__logo" />
				<div className="dashboard__content">
					<div className="dashboard__login-block">
						<AccountsUIWrapper />
						{errorSignIn && !isSignedIn ? (
							<div className="dashboard__login-block__error">
								<p>Please login first!</p>
							</div>
						) : null}
					</div>
					{rooms && rooms.length ? (
						<div className="dashboard__room-container">
							<h5 className="dashboard__room-header">Joined Rooms</h5>
							<ul className="dashboard__room-list">
								{rooms.map(room => (
									<li className="dashboard__room" key={room._id}>
										<span className="dashboard__room-name">{room.name}</span>
										<Link to={`/room/${room.slug}`} className="dashboard__join-button button">
											{Meteor.userId() === room.hostId ? 'JOIN AS HOST' : 'JOIN'}
										</Link>
									</li>
								))}
							</ul>
						</div>
					) : null}
					<form className="dashboard__add-room" onSubmit={this.onCreateRoom}>
						<label>NEW ROOM</label>
						<input type="text" placeholder="Room name" required name="name" minLength="4" onInput={this.onInputName} />
						<button type="submit" className="dashboard__create-button">
							CREATE
						</button>
					</form>
				</div>
				<Toaster type="error" open={toasterOpen} text={toasterText} onClose={this.onToasterClose} />
				<hr />
				<details>
					<summary>Introduction / Gi·ªõi thi·ªáu</summary>
					<p>
						A simple web app which allows groups of people (co-workers, gathering friends, housemates) collectively book
						and play continuously a list of songs.
					</p>
					<p>
						(TV) ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng web ƒë∆°n gi·∫£n cho ph√©p m·ªôt nh√≥m ng∆∞·ªùi d√πng c√πng ƒëƒÉng k√Ω b√†i h√°t v√†o m·ªôt danh s√°ch
						chung v√† nghe c√πng v·ªõi nhau. N√¢u Jukebox r·∫•t ph√π h·ª£p v·ªõi m·ªôt nh√≥m ng∆∞·ªùi ƒëang nghe nh·∫°c c√πng nhau: t·∫°i c√¥ng
						s·ªü, qu√°n c√† ph√™, b·∫°n b√® c√πng l·ªõp, c√πng ph√≤ng...
					</p>
				</details>
				<details>
					<summary>H∆∞·ªõng d·∫´n</summary>
					<ul>
						<li>ƒê·∫ßu ti√™n b·∫°n c·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n Facebook ho·∫∑c Google</li>
						<li>Ti·∫øp theo, b·∫°n t·∫°o m·ªôt ph√≤ng nghe nh·∫°c chung, v√† tr·ªü th√†nh Host (ch·ªß ph√≤ng).</li>
						<li>
							M·ªôt khi ph√≤ng nghe nh·∫°c ƒë√£ ƒë∆∞·ª£c t·∫°o, m·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ v√†o ph√≤ng xem danh s√°ch b√†i h√°t th√¥ng qua m·ªôt
							ƒë·ªãa ch·ªâ URL d√†nh ri√™ng cho Ph√≤ng.
						</li>
						<li>
							ƒê·ªÉ ƒëƒÉng k√Ω b√†i h√°t, c√°c user kh√°c c·∫ßn ƒëƒÉng nh·∫≠p. Danh s√°ch nh·ªØng user ƒë√£ ƒëƒÉng nh·∫≠p v√†o ph√≤ng s·∫Ω hi·ªán l√™n
							b√™n danh s√°ch Users.
						</li>
						<li>
							Copy ƒë∆∞·ªùng link tr√™n thanh ƒë·ªãa ch·ªâ t·∫°i trang b√†i h√°t (trang ƒë∆°n, kh√¥ng ph·∫£i playlist) c·ªßa m·ªôt trong c√°c
							website nghe nh·∫°c ƒë∆∞·ª£c h·ªó tr·ª£.
						</li>
						<li>D√°n v√†o √¥ t√¨m ki·∫øm v√† Enter (ho·∫∑c b·∫•m Search)</li>
						<li>
							<strong>HO·∫∂C</strong> b·∫°n c√≥ th·ªÉ nh·∫≠p v√†o t·ª´ kho√° ƒë·ªÉ t√¨m ki·∫øm b√†i h√°t s·∫µn c√≥ trong c∆° s·ªü d·ªØ li·ªáu c·ªßa
							Jukebox.
						</li>
						<li>
							C√°c trang nghe nh·∫°c ƒëang ƒë∆∞·ª£c h·ªó tr·ª£ l√†:
							<ul>
								<li>
									<a href="https://youtube.com" target="_blank" rel="noopener noreferrer">
										youtube.com
									</a>: Nh·∫°c qu·ªëc t·∫ø, nh·∫°c underground, MV m·ªõi nh·∫•t t·ª´ c√°c ngh·ªá s·ªπ trong v√† ngo√†i Vi·ªát Nam
								</li>
								<li>
									<a href="https://soundcloud.com" target="_blank" rel="noopener noreferrer">
										soundcloud.com
									</a>: Nh·∫°c indie, nh·∫°c underground...
								</li>
								<li>
									<a href="https://www.nhaccuatui.com" target="_blank" rel="noopener noreferrer">
										nhaccuatui.com
									</a>: V-pop, nh·∫°c x∆∞a, nh·∫°c H√†n, nh·∫°c √Çu M·ªπ...
								</li>
								<li>
									<a href="https://mp3.zing.vn" target="_blank" rel="noopener noreferrer">
										mp3.zing.vn
									</a>: V-pop, nh·∫°c x∆∞a, nh·∫°c H√†n, nh·∫°c √Çu M·ªπ...
								</li>
							</ul>
						</li>
					</ul>
				</details>
				<details>
					<summary>How to?</summary>
					<ul>
						<li>First user login with either Facebook or Google account.</li>
						<li>Next, user will create a room for the group and become the room&#039;s host.</li>
						<li>Once the room is created, everyone can join the room by visiting a unique URL.</li>
						<li>To book songs, users must login.</li>
						<li>Copy the URL to a single song from supported services and paste it to the search box.</li>
						<li>
							<strong>Or</strong> search from known songs in Nau Jukebox database and book quickly.
						</li>
						<li>
							Supported services whose song can be booked from:{' '}
							<a href="https://youtube.com" target="_blank" rel="noopener noreferrer">
								youtube.com
							</a>,{' '}
							<a href="https://soundcloud.com" target="_blank" rel="noopener noreferrer">
								soundcloud.com
							</a>,{' '}
							<a href="https://www.nhaccuatui.com" target="_blank" rel="noopener noreferrer">
								nhaccuatui.com
							</a>,{' '}
							<a href="https://mp3.zing.vn" target="_blank" rel="noopener noreferrer">
								mp3.zing.vn
							</a>
						</li>
					</ul>
				</details>
				<details>
					<summary>H·ªèi ƒê√°p</summary>
					<dl>
						<dt>N√¢u Jukebox mi·ªÖn ph√≠ hay c√≥ thu ph√≠?</dt>
						<dd>N√¢u Jukebox s·∫Ω lu√¥n mi·ªÖn ph√≠.</dd>
						<dt>T·∫°i sao kh√¥ng c√≥ thanh ti·∫øn tr√¨nh ƒë·ªÉ qua nhanh?</dt>
						<dd>
							Ch√∫ng t√¥i cho r·∫±ng m·ªói b√†i h√°t ƒë∆∞·ª£c book m·ªôt khi ƒë√£ ch∆°i, c·∫ßn ƒë∆∞·ª£c ch∆°i tr·ªçn v·∫πn. Ng∆∞·ªùi Host v·∫´n c√≥ quy·ªÅn
							b·ªè qua b√†i h√°t kh√°c.
						</dd>
						<dt>Naucoin (trong tab Users) l√† g√¨?</dt>
						<dd>
							Naucoin l√† ƒë∆°n v·ªã ti·ªÅn ·∫£o (kh√¥ng ph·∫£i ti·ªÅn crypto üôÇ) ƒë∆∞·ª£c ch√∫ng t√¥i t·∫°o ra ƒë·ªÉ c√°c nh√≥m c√≥ th·ªÉ d√πng l√†m
							ƒëi·ªÉm ƒë·ªÉ th∆∞·ªüng cho c√°c tr√≤ ch∆°i trong room. Ng∆∞·ªùi host c≈©ng v·ªõi vai tr√≤ l√† tr·ªçng t√†i c√≥ quy·ªÅn set Naucoin
							cho b·∫•t k·ª≥ ai trong room. Lu·∫≠t ch∆°i do nh√≥m t·ª± ƒë·∫∑t ra, v√≠ d·ª•, ƒë·∫∑t c∆∞·ª£c v√† ƒëo√°n xem ai v·ª´a book b√†i ƒëang
							ph√°t.
						</dd>
						<dt>T√¥i c√≥ th·ªÉ book nh·∫°c t·ª´ website X?</dt>
						<dd>
							Hi·ªán t·∫°i N√¢u Jukebox h·ªó tr·ª£ book nh·∫°c t·ª´ c√°c trang:{' '}
							<a href="https://youtube.com" target="_blank" rel="noopener noreferrer">
								youtube.com
							</a>,{' '}
							<a href="https://soundcloud.com" target="_blank" rel="noopener noreferrer">
								soundcloud.com
							</a>,{' '}
							<a href="https://www.nhaccuatui.com" target="_blank" rel="noopener noreferrer">
								nhaccuatui.com
							</a>,{' '}
							<a href="https://mp3.zing.vn" target="_blank" rel="noopener noreferrer">
								mp3.zing.vn
							</a>. N·∫øu b·∫°n mu·ªën ch√∫ng t√¥i h·ªó tr·ª£ th√™m m·ªôt trang nh·∫°c kh√°c ngo√†i c√°c trang tr√™n, vui l√≤ng t·∫°o m·ªôt
							feature request t·∫°i <a href="https://github.com/naustudio/nau-jukebox/issues">github</a> c·ªßa N√¢u Jukebox
							ho·∫∑c g·ª≠i email v·ªÅ ƒë·ªãa ch·ªâ: <a href="mailto:jukebox@naustud.io">jukebox@naustud.io</a>
						</dd>
					</dl>
				</details>
			</div>
		);
	}
}

export default withTracker(() => {
	const _id = Meteor.userId();
	let joinedRooms = [];
	const currentUser = Meteor.userId() ? Users.findOne({ _id }) : undefined;
	joinedRooms = (currentUser && currentUser.joinedRooms) || [];

	return {
		isSignedIn: !!Meteor.userId(),
		rooms: Rooms.find({ _id: { $in: joinedRooms } }).fetch(),
	};
})(Container.create(Dashboard));
